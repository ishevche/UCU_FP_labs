#!/usr/bin/env python3
""#line:6
import random #line:7
from logging import DEBUG ,debug ,getLogger #line:8
getLogger ().setLevel (DEBUG )#line:10
def parse_field_info ():#line:13
    ""#line:22
    O0O000OOOO0OO0000 =input ().split (" ")#line:23
    OOO0O0O00O000OO0O =int (O0O000OOOO0OO0000 [1 ])#line:24
    OOO000O0OOOO0O0OO =int (O0O000OOOO0OO0000 [2 ][:-1 ])#line:25
    return OOO000O0OOOO0O0OO ,OOO0O0O00O000OO0O #line:27
def parse_field (OOO00O0O0OO0O000O :int ):#line:30
    ""#line:68
    OOO0O00000O0OOO00 =[]#line:69
    OOO00OOO0O0OOOO00 =input ()#line:70
    for O0O0000OOO00O000O in range (OOO00O0O0OO0O000O ):#line:72
        OOO00OOO0O0OOOO00 =input ()#line:73
        OOO0O00000O0OOO00 .append ([])#line:74
        for OOOO00O0O0OO0O0OO in range (4 ,len (OOO00OOO0O0OOOO00 )):#line:76
            OOO0O00000O0OOO00 [O0O0000OOO00O000O ].append (OOO00OOO0O0OOOO00 [OOOO00O0O0OO0O0OO ].lower ())#line:77
    return OOO0O00000O0OOO00 #line:78
def parse_figure ():#line:81
    ""#line:94
    OOOO0O0000OOOOOOO =input ().split (' ')#line:95
    OOOOOOO00OO00000O =[]#line:96
    O000O000O000OO00O =int (OOOO0O0000OOOOOOO [1 ])#line:97
    OO00OO00OO0O0O00O =int (OOOO0O0000OOOOOOO [2 ][:-1 ])#line:98
    for O0O000O000O0OOO00 in range (O000O000O000OO00O ):#line:100
        OOOO0O0000OOOOOOO =input ()#line:101
        OOOOOOO00OO00000O .append ([])#line:102
        for OO00000OO00O0OOOO in OOOO0O0000OOOOOOO :#line:103
            OOOOOOO00OO00000O [O0O000O000O0OOO00 ].append (OO00000OO00O0OOOO )#line:104
    return OOOOOOO00OO00000O ,OO00OO00OO0O0O00O ,O000O000O000OO00O #line:105
def get_edges (OO00OO00O0OOOOO0O ,OOO00O0O0OO00OO00 ,OO000O00O000OOOOO ,OOO0OOOOOO0O00OOO ,O0OOOOOO00000O0O0 ,O0O0O00O000OOO0OO ):#line:108
    O00O0OO00O0O0OOO0 =OO000O00O000OOOOO #line:109
    OO0OO00O0O0O00O00 =OO000O00O000OOOOO #line:110
    OOOO0OOOO0OOO0OOO =OOO00O0O0OO00OO00 #line:111
    OO000O00OOOOO0OO0 =0 #line:112
    for O000O00O0000O0OOO in range (OO000O00O000OOOOO ):#line:113
        OO00O0OOO00O0OOOO =False #line:114
        for O0O0OO00000OOO0O0 in range (OOO00O0O0OO00OO00 ):#line:115
            if OO00OO00O0OOOOO0O [O000O00O0000O0OOO ][O0O0OO00000OOO0O0 ]==("o"if O0O0O00O000OOO0OO ==1 else "x"):#line:116
                OO00O0OOO00O0OOOO =True #line:117
                if OOOO0OOOO0OOO0OOO >O0O0OO00000OOO0O0 :#line:118
                    OOOO0OOOO0OOO0OOO =O0O0OO00000OOO0O0 #line:119
                if OO000O00OOOOO0OO0 <O0O0OO00000OOO0O0 :#line:120
                    OO000O00OOOOO0OO0 =O0O0OO00000OOO0O0 #line:121
        if OO00O0OOO00O0OOOO :#line:123
            if OO0OO00O0O0O00O00 ==OO000O00O000OOOOO :#line:124
                OO0OO00O0O0O00O00 =O000O00O0000O0OOO #line:125
            O00O0OO00O0O0OOO0 =O000O00O0000O0OOO #line:126
    OO0OO00O0O0O00O00 =OO0OO00O0O0O00O00 -O0OOOOOO00000O0O0 +1 #line:128
    if OO0OO00O0O0O00O00 <0 :#line:129
        OO0OO00O0O0O00O00 =0 #line:130
    if OO000O00OOOOO0OO0 +OOO0OOOOOO0O00OOO >OOO00O0O0OO00OO00 :#line:131
        OO000O00OOOOO0OO0 =OOO00O0O0OO00OO00 -OOO0OOOOOO0O00OOO #line:132
    OOOO0OOOO0OOO0OOO =OOOO0OOOO0OOO0OOO -OOO0OOOOOO0O00OOO +1 #line:133
    if OOOO0OOOO0OOO0OOO <0 :#line:134
        OOOO0OOOO0OOO0OOO =0 #line:135
    if O00O0OO00O0O0OOO0 +O0OOOOOO00000O0O0 >OO000O00O000OOOOO :#line:136
        O00O0OO00O0O0OOO0 =OO000O00O000OOOOO -O0OOOOOO00000O0O0 #line:137
    if OOOO0OOOO0OOO0OOO >OO000O00OOOOO0OO0 :#line:138
        OOOO0OOOO0OOO0OOO =OO000O00OOOOO0OO0 #line:139
    return OO0OO00O0O0O00O00 ,OO000O00OOOOO0OO0 ,O00O0OO00O0O0OOO0 ,OOOO0OOOO0OOO0OOO #line:142
def suitable_move (OOOOOOO0O0OOO0000 ,OOO00O00O00O0O0O0 ,OOO0OOOO0OO000OO0 ,O0O0OO00OO00OO00O ,O00OOOO0O0OO0OO0O ,OO0O0O00OO0O0OO0O ,O0O0OOO00OOOOO000 ,O000O00OO0OOOO0OO ,OO000O00O00O00O0O ,O00O0O000O0000O0O ):#line:145
    O00OO000O0OOO0OOO ="o"if O00O0O000O0000O0O ==1 else "x"#line:146
    O0000OO0000OOO00O ="x"if O00OO000O0OOO0OOO =="o"else "o"#line:147
    O0O000O00000OOO0O =0 #line:148
    OO0O00O00O000O0O0 =0 #line:149
    for O000O0OO0OOOOOOO0 in range (OO000O00O00O00O0O ,OO000O00O00O00O0O +O0O0OOO00OOOOO000 ):#line:150
        for OOO0O0OOOO000000O in range (O000O00OO0OOOO0OO ,O000O00OO0OOOO0OO +OO0O0O00OO0O0OO0O ):#line:151
            O00OO0OOOO00O0OOO =OOOOOOO0O0OOO0000 [O000O0OO0OOOOOOO0 ][OOO0O0OOOO000000O ]#line:152
            O0O000O0OO0OOOO0O =O00OOOO0O0OO0OO0O [O000O0OO0OOOOOOO0 -OO000O00O00O00O0O ][OOO0O0OOOO000000O -O000O00OO0OOOO0OO ]#line:153
            if O00OO0OOOO00O0OOO ==O00OO000O0OOO0OOO and O0O000O0OO0OOOO0O =="*":#line:154
                O0O0OO00OO00OO00O .lst [O000O0OO0OOOOOOO0 ][OOO0O0OOOO000000O ]=find_the_shortest_path (OOO0O0OOOO000000O ,O000O0OO0OOOOOOO0 ,OOOOOOO0O0OOO0000 ,OOO00O00O00O0O0O0 ,OOO0OOOO0OO000OO0 ,O00O0O000O0000O0O )#line:155
                OO0O00O00O000O0O0 +=O0O0OO00OO00OO00O .lst [O000O0OO0OOOOOOO0 ][OOO0O0OOOO000000O ]#line:156
                O0O000O00000OOO0O +=1 #line:157
            elif O00OO0OOOO00O0OOO ==O0000OO0000OOO00O and O0O000O0OO0OOOO0O =="*":#line:158
                return (False ,0 )#line:159
            if O0O000O00000OOO0O >1 :#line:160
                return (False ,0 )#line:161
    if O0O000O00000OOO0O ==1 :#line:162
        return (True ,OO0O00O00O000O0O0 )#line:163
    return (False ,0 )#line:164
class HeatMap :#line:167
    lst =[]#line:168
    def __init__ (OO0OOO0O0O0OO00OO ,OO00OO000O0O00OO0 ,OOO0O0000O0O0O000 ):#line:170
        OO0OOO0O0O0OO00OO .lst =[]#line:171
        for OO000O0OOOO00O0O0 in range (OOO0O0000O0O0O000 ):#line:172
            OO0OOO0O0O0OO00OO .lst .append ([])#line:173
            for O0000OOOOOOO0O0O0 in range (OO00OO000O0O00OO0 ):#line:174
                OO0OOO0O0O0OO00OO .lst [OO000O0OOOO00O0O0 ].append (1000 )#line:175
def possible_moves (O0OO00O000O0000OO ,OO0O00OOOOO00OO0O ,O00OO0OO00O0OOOOO ,OOOO00OOOOO00OO0O ,OOOOOOO0O0O00O0O0 ,OO0000O00OOOOOO0O ,O000000OOO00OOOO0 ,O0O000O00OO00O000 ,OOO0OOOO0OO00000O ,OOOOO00O00O0O00OO ,OOO00000OO0OO0O00 ):#line:178
    OOO000000O00O0OO0 =HeatMap (OO0O00OOOOO00OO0O ,O00OO0OO00O0OOOOO )#line:179
    OOO0O0O0OOOOOOOOO =None #line:180
    OOOO00O0O0O0O0000 =10000 #line:181
    for OO0OO000O0OO0OOO0 in range (O0O000O00OO00O000 ,OOOOO00O00O0O00OO +1 ):#line:183
        for OO000OOOOO00O00OO in range (OOO00000OO0OO0O00 ,OOO0OOOO0OO00000O +1 ):#line:184
            O0O00O0OOO0OOOOO0 ,O0O000OOOO0O00OO0 =suitable_move (O0OO00O000O0000OO ,OO0O00OOOOO00OO0O ,O00OO0OO00O0OOOOO ,OOO000000O00O0OO0 ,OOOO00OOOOO00OO0O ,OOOOOOO0O0O00O0O0 ,OO0000O00OOOOOO0O ,OO000OOOOO00O00OO ,OO0OO000O0OO0OOO0 ,O000000OOO00OOOO0 )#line:188
            if O0O00O0OOO0OOOOO0 and O0O000OOOO0O00OO0 <OOOO00O0O0O0O0000 :#line:189
                OOO0O0O0OOOOOOOOO =OO0OO000O0OO0OOO0 ,OO000OOOOO00O00OO #line:190
                OOOO00O0O0O0O0000 =O0O000OOOO0O00OO0 #line:191
    return OOO0O0O0OOOOOOOOO #line:192
def step (OOO00O00O00O00O0O :int ):#line:195
    ""#line:200
    O0000O0OOO0O00O00 ,O0OOO0OO0O0O0OO00 =parse_field_info ()#line:201
    OOO00O000O0OOO0OO =parse_field (O0OOO0OO0O0O0OO00 )#line:202
    O00OOOO0OOOOO0000 ,O00OO0O000OO00OO0 ,OOO0OO0O0O0OO0O00 =parse_figure ()#line:203
    OOO00000O000OO000 ,O0O00O0O00OOOO000 ,O000000O0OOOOO0O0 ,O0OOO0OOOOO00000O =get_edges (OOO00O000O0OOO0OO ,O0000O0OOO0O00O00 ,O0OOO0OO0O0O0OO00 ,O00OO0O000OO00OO0 ,OOO0OO0O0O0OO0O00 ,OOO00O00O00O00O0O )#line:204
    O000000OO0OO000O0 =possible_moves (OOO00O000O0OOO0OO ,O0000O0OOO0O00O00 ,O0OOO0OO0O0O0OO00 ,O00OOOO0OOOOO0000 ,O00OO0O000OO00OO0 ,OOO0OO0O0O0OO0O00 ,OOO00O00O00O00O0O ,OOO00000O000OO000 ,O0O00O0O00OOOO000 ,O000000O0OOOOO0O0 ,O0OOO0OOOOO00000O )#line:205
    return O000000OO0OO000O0 #line:206
def find_the_shortest_path (O000O0O0O0OO0000O ,OO0OOOOO00O0OO00O ,O00OO00OOOO0O0O0O ,O00O0O00O0OOO0O00 ,OO000OO000000000O ,OO00OO00O0OOO0OOO ):#line:209
    OOOOO0OO0OOOOO0O0 =100000 #line:210
    for O0OOO000O00O0O00O in range (OO000OO000000000O ):#line:211
        for O0OO000000O00O000 in range (O00O0O00O0OOO0O00 ):#line:212
            if O000O0O0O0OO0000O ==O0OO000000O00O000 and OO0OOOOO00O0OO00O ==O0OOO000O00O0O00O :#line:213
                continue #line:214
            if O00OO00OOOO0O0O0O [O0OOO000O00O0O00O ][O0OO000000O00O000 ]!=('x'if OO00OO00O0OOO0OOO ==1 else 'o'):#line:215
                continue #line:216
            O00O0000000O00OO0 =abs (O000O0O0O0OO0000O -O0OO000000O00O000 )+abs (OO0OOOOO00O0OO00O -O0OOO000O00O0O00O )#line:217
            if O00O0000000O00OO0 <OOOOO0OO0OOOOO0O0 :#line:218
                OOOOO0OO0OOOOO0O0 =O00O0000000O00OO0 #line:219
            if OOOOO0OO0OOOOO0O0 ==1 :#line:220
                return OOOOO0OO0OOOOO0O0 #line:221
    return OOOOO0OO0OOOOO0O0 #line:222
"""
Chooses the best option to place a figure depending on the distance to enemies pieces
:param moves: list: Represents a list of all possible moves
:return: One move that represents the best in terms of chosen strategy
"""#line:229
def play (OO00O00O0OOO000OO :int ):#line:232
    ""#line:237
    while True :#line:238
        OOOOOOOO0OOO00000 =step (OO00O00O0OOO000OO )#line:239
        print (*OOOOOOOO0OOO00000 )#line:240
def parse_info_about_player ():#line:243
    ""#line:250
    OOOOOOO00O000OOOO =input ()#line:251
    debug (f"Info about the player: {OOOOOOO00O000OOOO}")#line:252
    return 1 if "p1 :"in OOOOOOO00O000OOOO else 2 #line:253
def main ():#line:256
    OOOOO0O000000OOO0 =parse_info_about_player ()#line:257
    try :#line:258
        play (OOOOO0O000000OOO0 )#line:259
    except EOFError :#line:260
        debug ("Cannot get input. Seems that we've lost ):")#line:261
if __name__ =="__main__":#line:264
    main ()#line:265
